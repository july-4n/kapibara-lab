(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

var _iosVhFix = require("./utils/ios-vh-fix");
var _sendForm = require("./modules/form/send-form");
// ---------------------------------

window.addEventListener('DOMContentLoaded', function () {
  // Utils
  // ---------------------------------

  (0, _iosVhFix.iosVhFix)();

  // Modules
  // ---------------------------------

  window.addEventListener('load', function () {
    (0, _sendForm.sendForm)('diagnostics');
  });
});

},{"./modules/form/send-form":3,"./utils/ios-vh-fix":6}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.formatInput = void 0;
var formatInput = exports.formatInput = function formatInput(input) {
  var value = input.value.trim();
  if (value) {
    input.value = value.charAt(0).toUpperCase() + value.slice(1);
  }
};

},{}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sendForm = void 0;
var _validateInputs = require("./validate-inputs");
var URL = 'https://jsonplaceholder.typicode.com/posts';
var sendForm = exports.sendForm = function sendForm(formId) {
  var form = document.getElementById(formId);
  var sendData = function sendData(data) {
    return fetch(URL, {
      method: 'POST',
      body: JSON.stringify(data),
      headers: {
        'Content-Type': 'application/json'
      }
    }).then(function (res) {
      return res.json();
    });
  };
  var submitForm = function submitForm() {
    var formElems = form.querySelectorAll('input');
    var formData = new FormData(form);
    var formBody = Object.fromEntries(formData);
    var message = form.querySelector('[data-message="success"]');
    if ((0, _validateInputs.validateInputs)(formElems)) {
      sendData(formBody).then(function (data) {
        message.classList.add('is-active');
        setTimeout(function () {
          message.classList.remove('is-active');
        }, 2000);
        formElems.forEach(function (input) {
          input.value = '';
        });
      });
    }
  };
  try {
    form.addEventListener('submit', function (evt) {
      evt.preventDefault();
      submitForm();
    });
  } catch (error) {
    // eslint-disable-next-line no-console
    console.log(error);
  }
};

},{"./validate-inputs":4}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validateInputs = void 0;
var _formatInput = require("./format-input");
var validateInputs = exports.validateInputs = function validateInputs(list) {
  var success = true;
  var regex = /^[а-яА-ЯЁёa-zA-Z]+$/;
  list.forEach(function (input) {
    (0, _formatInput.formatInput)(input);
    if (regex.test(input.value)) {
      input.parentNode.classList.remove('error');
    } else {
      success = false;
      input.parentNode.classList.add('error');
    }
  });
  return success;
};

},{"./format-input":2}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.iosChecker = void 0;
var iosChecker = exports.iosChecker = function iosChecker() {
  return ['iPad Simulator', 'iPhone Simulator', 'iPod Simulator', 'iPad', 'iPhone', 'iPod'].includes(navigator.platform)
  // iPad on iOS 13 detection
  || navigator.userAgent.includes('Mac') && 'ontouchend' in document;
};

},{}],6:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.iosVhFix = void 0;
var _iosChecker = require("./ios-checker");
var iosVhFix = exports.iosVhFix = function iosVhFix() {
  if (!(!!window.MSInputMethodContext && !!document.documentMode)) {
    if ((0, _iosChecker.iosChecker)()) {
      var vh = window.innerHeight * 0.01;
      document.documentElement.style.setProperty('--vh', "".concat(vh, "px"));
      window.addEventListener('resize', function () {
        vh = window.innerHeight * 0.01;
        document.documentElement.style.setProperty('--vh', "".concat(vh, "px"));
      });
    }
  }
};

},{"./ios-checker":5}]},{},[1])


//# sourceMappingURL=main.min.js.map
